{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VC MIPI\u00ae CSI-2 Camera Modules MIPI CSI-2 camera modules are ideal for multi camera applications including mobile and distributed applications like autonomous driving, UAVs, Smart City, medical technology, and laboratory automation. Use this guide to build the necessary software and test your new VC MIPI Camera Module.","title":"Introduction"},{"location":"#vc-mipi-csi-2-camera-modules","text":"MIPI CSI-2 camera modules are ideal for multi camera applications including mobile and distributed applications like autonomous driving, UAVs, Smart City, medical technology, and laboratory automation. Use this guide to build the necessary software and test your new VC MIPI Camera Module.","title":"VC MIPI\u00ae CSI-2 Camera Modules"},{"location":"build_sd_card_image/","text":"Build a SD Card Image to use a specific MIPI CSI-2 camera module Build the SD Card Image We have developed a script to easily create a SD Card Image. The script execute three steps: Patching NVIDIA Kernel Sources with VC MIPI Drivers Build the Kernel Image and Device Tree files Create the SD Card Image Just execute following script $ cd vc_mipi_driver/bin # Example 1: Jetpack 4.3 and Omnivision 9281 camera $ ./create_sd_card_image.sh 43 OV9281 # Example 2: Jetpack 4.3 and IMX 327C camera $ ./create_sd_card_image.sh 441 IMX327C The build process and creation of the SD Card Image will take a while. If everything went well you will find the SD Card Image in the disc_images folder. vc_mipi_driver |-- bin |-- docs |-- jp4.3 | |-- disc_images # Contains all created SD Card Images | | ... |-- src +-- test In the next step you will prepare your Developer Kit and create a SD Card with your freshly created Image.","title":"Build SD Card Image"},{"location":"build_sd_card_image/#build-a-sd-card-image-to-use-a-specific-mipi-csi-2-camera-module","text":"","title":"Build a SD Card Image to use a specific MIPI CSI-2 camera module"},{"location":"build_sd_card_image/#build-the-sd-card-image","text":"We have developed a script to easily create a SD Card Image. The script execute three steps: Patching NVIDIA Kernel Sources with VC MIPI Drivers Build the Kernel Image and Device Tree files Create the SD Card Image Just execute following script $ cd vc_mipi_driver/bin # Example 1: Jetpack 4.3 and Omnivision 9281 camera $ ./create_sd_card_image.sh 43 OV9281 # Example 2: Jetpack 4.3 and IMX 327C camera $ ./create_sd_card_image.sh 441 IMX327C The build process and creation of the SD Card Image will take a while. If everything went well you will find the SD Card Image in the disc_images folder. vc_mipi_driver |-- bin |-- docs |-- jp4.3 | |-- disc_images # Contains all created SD Card Images | | ... |-- src +-- test In the next step you will prepare your Developer Kit and create a SD Card with your freshly created Image.","title":"Build the SD Card Image"},{"location":"getting_started/","text":"Getting Started This documentation will guide you to build a ready to use SD Card Image file to get your Vision Components MIPI CSI-2 Camera up an running in just a few steps. Currently we support NVIDIA Jetpack Version 4.3 and 4.4.1 Setup your Host Machine First of all you need a Linux Host System to build the Linux Kernel Image. NVIDIA recommends to run Ubuntu 16.04 LTS or 18.04 LTS. Download Build Scripts $ git clone https://github.com/pmliquify/vc_mipi_driver.git Setup NVIDIA toolchain and Jetpack Source Code INFO The Setup Scripts will install necessary build tool packages (build-essential, python2.7 python-to-python2, qemu-user-static) download and extract the Toolchain and all files of the Jetpack BSP and the Kernel Sources. $ cd vc_mipi_driver/bin $ ./setup.sh 43 # Example 1: If you want to use Jetpack 4.3 $ ./setup.sh 441 # Example 2: If you want to use Jetpack 4.4.1 CHECK if everything went well. You will get an additional directory jp4.3 or jp4.4.1. Check if all folders are there. vc_mipi_driver |-- bin |-- docs |-- jp4.3 # Tools and sources for Jetpack 4.3 | |-- downloads # Downloaded archives | |-- Linux_for_Tegra | | | ... # Board support package | | |-- rootfs | | | | ... # Sample root file system | | +-- source/public/kernel/kernel-4.9 | | | ... # Kernel sources | +-- toolchain | +-- gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu | | ... # Cross compiler and other build tools |-- src +-- test In the next step you will create the SD Card Image.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This documentation will guide you to build a ready to use SD Card Image file to get your Vision Components MIPI CSI-2 Camera up an running in just a few steps. Currently we support NVIDIA Jetpack Version 4.3 and 4.4.1","title":"Getting Started"},{"location":"getting_started/#setup-your-host-machine","text":"First of all you need a Linux Host System to build the Linux Kernel Image. NVIDIA recommends to run Ubuntu 16.04 LTS or 18.04 LTS.","title":"Setup your Host Machine"},{"location":"getting_started/#download-build-scripts","text":"$ git clone https://github.com/pmliquify/vc_mipi_driver.git","title":"Download Build Scripts"},{"location":"getting_started/#setup-nvidia-toolchain-and-jetpack-source-code","text":"INFO The Setup Scripts will install necessary build tool packages (build-essential, python2.7 python-to-python2, qemu-user-static) download and extract the Toolchain and all files of the Jetpack BSP and the Kernel Sources. $ cd vc_mipi_driver/bin $ ./setup.sh 43 # Example 1: If you want to use Jetpack 4.3 $ ./setup.sh 441 # Example 2: If you want to use Jetpack 4.4.1 CHECK if everything went well. You will get an additional directory jp4.3 or jp4.4.1. Check if all folders are there. vc_mipi_driver |-- bin |-- docs |-- jp4.3 # Tools and sources for Jetpack 4.3 | |-- downloads # Downloaded archives | |-- Linux_for_Tegra | | | ... # Board support package | | |-- rootfs | | | | ... # Sample root file system | | +-- source/public/kernel/kernel-4.9 | | | ... # Kernel sources | +-- toolchain | +-- gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu | | ... # Cross compiler and other build tools |-- src +-- test In the next step you will create the SD Card Image.","title":"Setup NVIDIA toolchain and Jetpack Source Code"},{"location":"setup_developer_kit/","text":"Setup the Jetson Nano Developer Kit Please follow the instructions of the original Getting Started Tutorial but use the SD Card Image we just created. NVIDIA Getting Started with Jetson Nano Developer Kit Come back to this Guide and continue with the next step to test the camera.","title":"Setup Developer Kit"},{"location":"setup_developer_kit/#setup-the-jetson-nano-developer-kit","text":"Please follow the instructions of the original Getting Started Tutorial but use the SD Card Image we just created. NVIDIA Getting Started with Jetson Nano Developer Kit Come back to this Guide and continue with the next step to test the camera.","title":"Setup the Jetson Nano Developer Kit"},{"location":"test_camera/","text":"Test Camera We assume that your Jetson Nano Dev Kit Board is powered up running with the created SD Card Image. Connect the Camera Please power off the device and make shure that you habe connected the VCFPC 22->15 cable properly. Install Video4Linux Utilities Power up the Dev-Kit, login and install the CLI tools of Video4Linux. $ sudo apt update $ sudo apt install v4l-utils Check Camera Driver First we want to check if the camera is properly detected. $ v4l2-ctl --all The value of Card type should show the connected camera description. Driver Info (not using libv4l2): Driver name : tegra-video Card type : vi-output, ov9281 7-0060 Bus info : platform:54080000.vi:0 Driver version: 4.9.140 ... Start Live View To start a live view execute a simple GStreamer Pipeline. It streams an image from the v4l2src element, converts it automaticaly and displays it in a X11 window. $ gst-launch-1.0 \\ v4l2src device=\"/dev/video0\" ! \\ videoconvert ! \\ xvimagesink sync=false Adjust Exposure and Gain If the camera image is to dark or to bright simply adjust the exposure and gain values. In a second terminal type: $ v4l2-ctl -d /dev/video0 -c exposure=30000 $ v4l2-ctl -d /dev/video0 -c gain=50 Change Pixel Format Find out which Pixel Formats the camera supports. $ v4l2-ctl --list-formats For example 'GRAY' and 'Y10 ' as shown in the following listing. ioctl: VIDIOC_ENUM_FMT Index : 0 Type : Video Capture Pixel Format: 'GREY' Name : 8-bit Greyscale Size: Discrete 1280x800 Interval: Discrete 0.033s (30.000 fps) Index : 1 Type : Video Capture Pixel Format: 'Y10 ' Name : 10-bit Greyscale Size: Discrete 1280x800 Interval: Discrete 0.033s (30.000 fps) Change the Pixel Format by using the v4l2-ctl command again. NOTE Don't miss the whitespace in the Pixel Format Identifier. $ v4l2-ctl --set-fmt-video=pixelformat='Y10 ' Next Steps Congratulations your VC MIPI Camera Module is up an running. Now you can dive in and start develop your own fancy product. Refere to the NVIDIA Developer Documentation to learn more.","title":"Test Camera"},{"location":"test_camera/#test-camera","text":"We assume that your Jetson Nano Dev Kit Board is powered up running with the created SD Card Image.","title":"Test Camera"},{"location":"test_camera/#connect-the-camera","text":"Please power off the device and make shure that you habe connected the VCFPC 22->15 cable properly.","title":"Connect the Camera"},{"location":"test_camera/#install-video4linux-utilities","text":"Power up the Dev-Kit, login and install the CLI tools of Video4Linux. $ sudo apt update $ sudo apt install v4l-utils","title":"Install Video4Linux Utilities"},{"location":"test_camera/#check-camera-driver","text":"First we want to check if the camera is properly detected. $ v4l2-ctl --all The value of Card type should show the connected camera description. Driver Info (not using libv4l2): Driver name : tegra-video Card type : vi-output, ov9281 7-0060 Bus info : platform:54080000.vi:0 Driver version: 4.9.140 ...","title":"Check Camera Driver"},{"location":"test_camera/#start-live-view","text":"To start a live view execute a simple GStreamer Pipeline. It streams an image from the v4l2src element, converts it automaticaly and displays it in a X11 window. $ gst-launch-1.0 \\ v4l2src device=\"/dev/video0\" ! \\ videoconvert ! \\ xvimagesink sync=false","title":"Start Live View"},{"location":"test_camera/#adjust-exposure-and-gain","text":"If the camera image is to dark or to bright simply adjust the exposure and gain values. In a second terminal type: $ v4l2-ctl -d /dev/video0 -c exposure=30000 $ v4l2-ctl -d /dev/video0 -c gain=50","title":"Adjust Exposure and Gain"},{"location":"test_camera/#change-pixel-format","text":"Find out which Pixel Formats the camera supports. $ v4l2-ctl --list-formats For example 'GRAY' and 'Y10 ' as shown in the following listing. ioctl: VIDIOC_ENUM_FMT Index : 0 Type : Video Capture Pixel Format: 'GREY' Name : 8-bit Greyscale Size: Discrete 1280x800 Interval: Discrete 0.033s (30.000 fps) Index : 1 Type : Video Capture Pixel Format: 'Y10 ' Name : 10-bit Greyscale Size: Discrete 1280x800 Interval: Discrete 0.033s (30.000 fps) Change the Pixel Format by using the v4l2-ctl command again. NOTE Don't miss the whitespace in the Pixel Format Identifier. $ v4l2-ctl --set-fmt-video=pixelformat='Y10 '","title":"Change Pixel Format"},{"location":"test_camera/#next-steps","text":"Congratulations your VC MIPI Camera Module is up an running. Now you can dive in and start develop your own fancy product. Refere to the NVIDIA Developer Documentation to learn more.","title":"Next Steps"}]}