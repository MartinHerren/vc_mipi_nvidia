{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"getting_started/","text":"Getting Started MIPI CSI-2 camera modules are ideal for multi camera applications including mobile and distributed applications like autonomous driving, UAVs, Smart City, medical technology, and laboratory automation. This documentation will guide you to build a ready to use SD Card Image file to get your Vision Components MIPI CSI-2 Camera up an running in just a few steps.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"MIPI CSI-2 camera modules are ideal for multi camera applications including mobile and distributed applications like autonomous driving, UAVs, Smart City, medical technology, and laboratory automation. This documentation will guide you to build a ready to use SD Card Image file to get your Vision Components MIPI CSI-2 Camera up an running in just a few steps.","title":"Getting Started"},{"location":"getting_started/build_sd_card_image/","text":"Build a SD Card Image to use a specific MIPI CSI-2 camera module Select the Driver First of all you have to activate the driver for your VC MIPI CSI-2 camera module you want to test. Edit the file .../src/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-porg-p3448-common.dtsi with your prefered Editor. Activate the driver by set a 1 after the corresponding variable. // Enable one driver only ! #define VC_MIPI_OV9281 1 /* CCC - Enable VC MIPI OV9281 driver */ #define VC_MIPI_IMX183 0 /* CCC - Enable VC MIPI IMX183 driver (mono) */ As an example here, we have chosen the OV9281 driver. Pay attention that all other variables are set to 0! Build the SD Card Image We have prepared a Docker Image based on the Ubuntu 18.04 Image. All neccesary Linux packages, the Jetpack Toolchain an the complete Jetpack Sources are already installed and precomiled. To start the Docker Container execute following command in a terminal cd <your dir>/vc_mipi_nano_b01_32.4.4 ./create_sd_card_image.sh","title":"Build SD Card Image"},{"location":"getting_started/build_sd_card_image/#build-a-sd-card-image-to-use-a-specific-mipi-csi-2-camera-module","text":"","title":"Build a SD Card Image to use a specific MIPI CSI-2 camera module"},{"location":"getting_started/build_sd_card_image/#select-the-driver","text":"First of all you have to activate the driver for your VC MIPI CSI-2 camera module you want to test. Edit the file .../src/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-porg-p3448-common.dtsi with your prefered Editor. Activate the driver by set a 1 after the corresponding variable. // Enable one driver only ! #define VC_MIPI_OV9281 1 /* CCC - Enable VC MIPI OV9281 driver */ #define VC_MIPI_IMX183 0 /* CCC - Enable VC MIPI IMX183 driver (mono) */ As an example here, we have chosen the OV9281 driver. Pay attention that all other variables are set to 0!","title":"Select the Driver"},{"location":"getting_started/build_sd_card_image/#build-the-sd-card-image","text":"We have prepared a Docker Image based on the Ubuntu 18.04 Image. All neccesary Linux packages, the Jetpack Toolchain an the complete Jetpack Sources are already installed and precomiled. To start the Docker Container execute following command in a terminal cd <your dir>/vc_mipi_nano_b01_32.4.4 ./create_sd_card_image.sh","title":"Build the SD Card Image"},{"location":"getting_started/setup_developer_kit/","text":"Setup the Jetson Nano Developer Kit Please follow the instructions of the original Getting Started Tutorial. NOTE Use the image file we have build one step before. Getting Started with Jetson Nano Developer Kit","title":"Setup Developer Kit"},{"location":"getting_started/setup_developer_kit/#setup-the-jetson-nano-developer-kit","text":"Please follow the instructions of the original Getting Started Tutorial. NOTE Use the image file we have build one step before. Getting Started with Jetson Nano Developer Kit","title":"Setup the Jetson Nano Developer Kit"},{"location":"getting_started/test_camera/","text":"Test your Camera","title":"Test your Camera"},{"location":"getting_started/test_camera/#test-your-camera","text":"","title":"Test your Camera"},{"location":"manual_setup/","text":"Setup NVIDIA Jetson Jetpack development enviroment from Scratch Setup your host machine Recommended OS is Ubuntu 16.04 LTS or 18.04 LTS. If you want to use Docker Desktop. Download and install Docker Desktop for Windows or Mac. Open a terminal and start an ubuntu 18.04 LTS container. The following command will download the Ubuntu 18.04 LTS image an start a bash shell. docker run --name JDE_JP4.4.1 -v $PWD:/home/user -it ubuntu:18.04 /bin/bash You should see the linux command prompt now. Install following packages, which are essential f\u00fcr the NVIDIA toolchain. apt update apt install -y built-essential python2.7 gemu-user-static sshpass If you are using Docker you have to install some extra packages. apt install -y wget bc xxd The NVIDIA toolchain uses the plain python command. Create a symbolic link to python2.7. ln -s /usr/bin/python2.7 /usr/bin/python Setup NVIDIA toolchain and Jetpack Source Code We have prepared a ready to use script to download and extract all necessary tools, files and Source Codes for the Jetpack 4.4.1 release. Just execute the following command. cd bin ./setup_JP4.4.1.sh The script creates a tmp directory and downloads all archives. Then it creates a second directory named build an extracts the gcc linaro toolchain in build/l4t_gcc and the complete Jetpack Sources in build/Linux_for_Tegra .","title":"Manual Setup"},{"location":"manual_setup/#setup-nvidia-jetson-jetpack-development-enviroment-from-scratch","text":"","title":"Setup NVIDIA Jetson Jetpack development enviroment from Scratch"},{"location":"manual_setup/#setup-your-host-machine","text":"Recommended OS is Ubuntu 16.04 LTS or 18.04 LTS. If you want to use Docker Desktop. Download and install Docker Desktop for Windows or Mac. Open a terminal and start an ubuntu 18.04 LTS container. The following command will download the Ubuntu 18.04 LTS image an start a bash shell. docker run --name JDE_JP4.4.1 -v $PWD:/home/user -it ubuntu:18.04 /bin/bash You should see the linux command prompt now. Install following packages, which are essential f\u00fcr the NVIDIA toolchain. apt update apt install -y built-essential python2.7 gemu-user-static sshpass If you are using Docker you have to install some extra packages. apt install -y wget bc xxd The NVIDIA toolchain uses the plain python command. Create a symbolic link to python2.7. ln -s /usr/bin/python2.7 /usr/bin/python","title":"Setup your host machine"},{"location":"manual_setup/#setup-nvidia-toolchain-and-jetpack-source-code","text":"We have prepared a ready to use script to download and extract all necessary tools, files and Source Codes for the Jetpack 4.4.1 release. Just execute the following command. cd bin ./setup_JP4.4.1.sh The script creates a tmp directory and downloads all archives. Then it creates a second directory named build an extracts the gcc linaro toolchain in build/l4t_gcc and the complete Jetpack Sources in build/Linux_for_Tegra .","title":"Setup NVIDIA toolchain and Jetpack Source Code"}]}